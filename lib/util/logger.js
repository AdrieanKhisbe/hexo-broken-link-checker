var removeColors = require('./ansiStripper'),
    moment = require('moment'),
    fs = require('fs');

function Logger(options) {
  this._defaultPrefix = options.defaultPrefix || '';
  this._infoPrefix = options.infoPrefix || this._defaultPrefix;
  this._warnPrefix = options.warnPrefix || this._defaultPrefix;
  this._errPrefix = options.errPrefix || this._defaultPrefix;
  this._silent = options.silent || false; // silent saves log data on file system, instead of console.log'em.
  this.logFile = options.logFile || false;
}

Logger.prototype.info = function(line, forceSilent) {
  this._outputData(line, 'info', forceSilent);
};

Logger.prototype.error = function(line, forceSilent) {
  this._outputData(line, 'err', forceSilent);
};

Logger.prototype.warning = function(line, forceSilent) {
  this._outputData(line, 'warn', forceSilent);
};

Logger.prototype._outputData = function(data, type, forceSilent) {
  var datetime,
      prefix;

  if (this._silent || forceSilent) {
    if (!this.logFile) throw new Error('logFile option not provided.');
    if (!fs.existsSync(this.logFile)) throw new Error('logFile does not exists. Run `createLogs`.');

    datetime = moment().format('YYYY-MM-DD HH:mm:ss');
    data = removeColors(data);
    data = '[ '+datetime+' ] '+type.toUpperCase()+': '+data+'\n';

    fs.appendFileSync(this.logFile, data);
  } else {
    prefix = this['_'+type+'Prefix'];

    switch (type) {
      case 'info':
        console.log(prefix+data);
        break;
      case 'warn':
        console.warn(prefix+data);
        break;
      case 'err':
        console.error(prefix+data);
        break;
    }
  }
};

Logger.prototype.createLogs = function() {
  if (fs.existsSync(this.logFile)) return;

  var datetime = moment().format('YYYY-MM-DD HH:mm:ss');

  fs.writeFileSync(this.logFile, 'Generated by BrokenLinkChecker Logger utility - '+datetime+'\n\n');
  fs.chmodSync(this.logFile, 0777);
};

Logger.prototype.cleanLogs = function() {
  fs.unlinkSync(this.logFile);

  this.createLogs();
};

module.exports = Logger;